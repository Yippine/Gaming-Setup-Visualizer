---
description: Git 工作流程與版本控制指南。指導 AI 在接收「暫存」、「上版」等指令時，自動執行包含分支判斷、WIP 提交、Squash 合併、分支清理及提交訊息格式化的標準化 Git 流程。
globs: 
alwaysApply: false
---
# Git 工作流程與 AI 協作指南

本指南旨在定義一套標準化的 Git 工作流程，確保 AI 在協助開發「3D 燈光佈置預覽」專案時，能夠精準、一致地處理版本控制任務。

它涵蓋了從接收使用者指令到完成程式碼提交的整個過程，旨在實現高效、可追溯且符合業界最佳實踐的版本控制。

## 核心原則

AI 主要依據使用者的指令，執行兩種核心工作流程：

1.  **WIP 暫存流程 (WIP Workflow)**: 當使用者下達「暫存進度」、「建立儲存點」等指令時觸發。此流程的核心是將當前的工作進度，以 `WIP` (Work-In-Progress) 的形式，安全地提交到 `dev` 分支上。
2.  **正式提交流程 (Release Workflow)**: 當使用者下達「正式提交」、「上版」等指令時觸發。此流程會將 `dev` 分支上的所有 `WIP` 提交，壓平 (Squash) 成一則高品質的正式提交，合併回 `main` 分支，並清理環境。

---

## 2. WIP 暫存流程 (WIP Workflow)

此流程確保所有開發中的異動都能被及時且正確地記錄。

### 步驟 1: 智慧分支判斷
當接收到暫存指令時，AI 必須首先檢查當前是否在 `dev` 分支。
- **若不在 `dev` 分支**: AI 必須自動切換到 `dev` 分支後再執行後續操作。若 `dev` 分支不存在，則自動從 `main` 建立。

### 步驟 2: 建立 WIP 提交
1.  **加入異動**: 將當前對話中涉及的所有檔案變更加入暫存區 (`git add .`)。
2.  **建立提交**: 建立一筆 `WIP` 提交。
3.  **訊息格式**: 提交訊息應為**簡潔的中文描述**，直接說明該次進度的核心內容。
    - *範例*: `git commit -m "WIP: 建立電競桌的 3D 基礎模型"`
    - *範例*: `git commit -m "WIP: 完成「沉浸式氛圍方案」的燈光設定"`

---

## 3. 正式提交流程 (Release Workflow) - 全自動流程

此流程確保合入 `main` 分支的每一筆提交都是完整、有意義且格式標準的。**此流程為全自動，無需使用者手動介入。**

### 步驟 1: 切換並更新主幹
```bash
git checkout main
git pull origin main
```

### 步驟 2: 壓平合併 (Squash Merge)
在 `main` 分支上，執行 `squash merge` 將 `dev` 分支的所有提交內容，壓平為一次性的變更並放入暫存区。
```bash
git merge --squash dev
```

### 步驟 3: 正式提交
使用符合規範的訊息，將暫存區的變更提交至 `main` 分支。
```bash
git commit -m "[type] Subject"
```
- AI 會根據所有 `WIP` 提交的內容，自動草擬一則高品質的提交訊息。

### 步驟 4: 推送與清理
1.  **推送主幹**: 將更新後的 `main` 分支推送到遠端。
    ```bash
    git push origin main
    ```
2.  **刪除開發分支**: 在本地刪除已被合併的 `dev` 分支。
    ```bash
    git branch -D dev
    ```
    *此舉是為了確保下次開發是從一個乾淨的 `main` 分支開始。*

### 步驟 5: 最終驗證
完成上述步驟後，AI 必須自動執行 `git status` 和 `git log -n 3 --graph --oneline`，並向使用者回報結果，以確認工作區狀態乾淨且提交歷史正確。

---

## 4. 正式提交訊息規範

所有經由上版流程合入 `main` 分支的提交，都必須嚴格遵循此規範。

### 4.1 格式
`[type]: Subject`

- **範例**: `[feat]: 建立 3D 視覺化專案基礎架構`
- **範例**: `[fix]: 修正燈光位置與書桌模型的相對應關係`
- **範例**: `[docs]: 更新 Git 工作流程指南`

### 4.2 範疇 (Type) 定義
| 範疇 | 說明 |
| :--- | :--- |
| `feat` | 新增功能 (例如：建立 3D 模型、新增互動控制) |
| `fix` | 修正錯誤 (例如：修正模型尺寸、調整光線顏色) |
| `refactor` | 程式碼重構 (不影響外部行為) |
| `style` | 程式碼排版修正 (例如：調整縮排、修正格式) |
| `ui` | UI/UX 相關調整 (例如：修改 CSS 樣式、調整 HTML 結構) |
| `chore` | 事務性變更 (例如：更新套件、調整設定檔) |
| `docs` | 文件變更 (例如：更新 `README.md` 或 `.cursor/rules/*.mdc`) |

### 4.3 主題 (Subject) 撰寫規則
- **智慧化提煉**: AI 應分析 `dev` 分支上所有 `WIP` 提交的訊息，提煉總結出核心修改主題。
- **清晰簡潔**: 主題應清楚說明「做了什麼事」，聚焦於功能本身。
- **格式**:
    - 使用中文撰寫。
    - 不以「WIP」開頭。
    - 句尾不加句點。

## 5. 指令參考
- **日誌檢查**: `git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit`
- **常用指令**: `git status`, `git branch --show-current`